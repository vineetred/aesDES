#0x10000000,0x20000000,0x40000000,0x80000000,0x1B000000,0x36000000,0x6C000000,0xD8000000,0xAB000000,0x4D000000,0x9A000000]
# RC = [0x01000000, 0x02000000, 0x04000000,0x08000000]
# for i in range(3,17):
#     RC.append(0x02*RC[i])
# print(hex(RC[3]))

# SBOX = (
#     0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
#     0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
#     0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
#     0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
#     0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
#     0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
#     0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
#     0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
#     0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
#     0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
#     0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
#     0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
#     0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
#     0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
#     0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
#     0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
# )

# p2 = str(hex(SBOX[0xFB]))
# print(len(p2))
# p2 = p2[:2] + '0' + p2[2:]
# print(p2)
# import binascii
# key = "5468617473206D79204B756E67204675"
# text = "54776F204F6E65204E696E652054776F"
# hello = str(int(text,16) ^ int(key,16))
# hello = int("{:02x}".format(int(text,16)),16) ^ int("{:02x}".format(int(key,16)),16)
# hello = '1' + str(int(bin(int(key,16)),2) ^ int(bin(int(text,16)),2))
# print(hello)
# print(hex(int('1'+hello, 16)))
# print(hex(hello))
# hello = hex(int(hello))[2:]
# hello = hello.zfill(32)
import numpy as np
# print(hello)
# print(len(key))
# print(binascii.hexlify('hello\n'))
# print("{:02x}".format(int('1'+hello)))
test = "63c0ab20eb2f30cb9f93af2ba092c7a2"
# test = np.fromstring(test,dtype=hex)
# print(test.shape)
# print(test)
# for i in range(0,4):
# c0 = test[0:2] + test[8:10] + test[16:18] + test[24:26]
# c1 = test[2:4] + test[10:12] + test[18:20] + test[26:28]
# c2 = test[4:6] + test[12:14] + test[20:22] + test[28:30]
# c3 = test[6:8] + test[14:16] + test[22:24] + test[30:32]
# print(c3)
# def byte2array(bytes):
#     """Converts bytes to 4 x 4 array
#     :param bytes: bytes
#     :return: 4 x 4 array
#     """
#     array = []
#     for i, byte in enumerate(bytes):
#         if i % 4 == 0:
#             array.append([byte])
#         else:
#             array[i // 4].append(byte)
#     return array

# hell = bin(int(test,16))[2:]
# # print(hell)
# bbb = byte2array(hell)
# print(bbb)
# def array2hex(array):
#     """Converts 4 x 4 array to hex string
#     :param array: array
#     :return: hex string
#     """
#     hexstr = ""
#     for i in range(4):
#         hexstr += ''.join('{:02x}'.format(x) for x in array[i])
#     return hexstr

# # hexxx = array2hex(bbb)
fixed_Matrix = (
    [0x02,0x03,0x01,0x01],[0x01,0x02,0x03,0x01],[0x01,0x01,0x02,0x03],[0x03,0x01,0x01,0x02]
)
# print(fixed_Matrix[0][1])
def column(test):
    c = []
    letters = []
    k =0
    for j in range(0,4):
        for i in range(0,4):
            letters.append(test[(8*i)+k:(8*i)+2+k])
        k+=2
        c.append(letters)
        letters = []
    return c
world = column(test)
for i in range(0,4):
    world[i] = world[i][i::] + world[i][:i:]
print(world)

from pyfinite import ffield
F = ffield.FField(8)

def mixColumns(array):
    res = 0
    newres = []
    frik = []
    for i in range(0,4):
        for i in range(0,4):
            res = F.Multiply(fixed_Matrix[i][j],array[j][i]) 

mixColumns(world)

# a = F.Multiply(0x03,0x10)
print(a)